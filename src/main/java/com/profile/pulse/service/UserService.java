package com.profile.pulse.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.profile.pulse.dto.UserDTO;
import com.profile.pulse.model.User;
import com.profile.pulse.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;

@Service
@RequiredArgsConstructor
public class UserService {
    private final WebClient webClient;
    private final UserRepository repository;
    
    private static final String API_URL = "https://api.namefake.com/";
    
    // Fetch data from API with transformation
    public Mono<User> fetchAndTransformUserData() {
        return webClient.get()
                .uri(API_URL)
                .retrieve()
                .bodyToMono(String.class)
                .doOnNext(rawResponse -> {
                    System.out.println("=== RAW API RESPONSE ===");
                    System.out.println(rawResponse);
                    System.out.println("=======================");
                })
                .flatMap(rawResponse -> {
                    try {
                        // Parsing the data.
                        ObjectMapper mapper = new ObjectMapper();
                        UserDTO dto = mapper.readValue(rawResponse, UserDTO.class);
                        return Mono.just(transformToUser(dto));
                    } catch (Exception e) {
                        System.err.println("Error parsing JSON: " + e.getMessage());
                        return Mono.error(e);
                    }
                });
    }
    
    private User transformToUser(UserDTO dto) {
        // Calculate age from birth date
        int age = Period.between(
            LocalDate.parse(dto.getBirth_data()),
            LocalDate.now()
        ).getYears();

        double bmi = dto.getWeight() / Math.pow(dto.getHeight() / 100.0, 2);

        return new User(
            null, // id will be generated by MongoDB
            dto.getName(),
            dto.getAddress(),
            dto.getLatitude(),
            dto.getLongitude(),
            dto.getBirth_data(),
            dto.getPhone_h(),
            dto.getEmail_u() + "@" + dto.getEmail_d(),
            dto.getUsername(),
            age,
            dto.getBonus(),
            dto.getCompany(),
            dto.getHeight(),
            dto.getWeight(),
            dto.getBlood(),
            dto.getColor(),
            bmi,
            LocalDateTime.now()
        );
    }
    
    // Reactive CRUD operations
    public Mono<User> saveUser(User user) {
        return repository.save(user);
    }
    
    public Flux<User> getAllUsers() {
        return repository.findAllByOrderByCreatedAtDesc();
    }
    
    public Mono<User> getUserById(String id) {
        return repository.findById(id);
    }
    
    public Mono<User> updateUser(String id, User user) {
        return repository.findById(id)
                .flatMap(existingUser -> {
                    user.setId(existingUser.getId());
                    return repository.save(user);
                });
    }
    
    public Mono<Void> deleteUser(String id) {
        return repository.deleteById(id);
    }
    
    public Mono<Void> deleteAllUsers() {
        return repository.deleteAll();
    }
    
    // Custom queries
    public Flux<User> getUsersByAgeRange(int min, int max) {
        return repository.findByAgeBetween(min, max);
    }
    
    public Flux<User> getUsersWithBonusGreaterThan(int bonus) {
        return repository.findByBonusGreaterThan(bonus);
    }

    private String escapeRegex(String input) {
        return input == null ? null : input.replaceAll("([\\\\.*+\\[\\](){}|^$?])", "\\\\$1");
    }

    public Flux<User> searchUsers(String query) {
        String safeQuery = escapeRegex(query);
        return repository.searchUsers(safeQuery);
    }
}